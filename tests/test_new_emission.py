#!/usr/bin/env python3
"""
ZION 2.7.1 - Test nov√©ho emission schedule a auto distribuce z oper√°tor≈Ø
144 miliard ZION za 10 let s automatickou distribuc√≠ z mining oper√°tor≈Ø
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.real_blockchain import ZionRealBlockchain
from pool.zion_mining_pool import ZionMiningPool

def test_new_emission_and_distribution():
    """Test nov√©ho emission schedule s auto distribuc√≠"""
    
    print("üöÄ ZION 2.7.1 - Test nov√©ho emission schedule")
    print("=" * 60)
    
    # Vytvo≈ô blockchain a pool
    blockchain = ZionRealBlockchain()
    pool = ZionMiningPool(blockchain)
    
    # Zkontroluj nov√Ω block reward
    base_reward_atomic = blockchain.block_reward
    base_reward_zion = base_reward_atomic / 1_000_000
    
    print(f"üí∞ Nov√Ω base block reward: {base_reward_zion:,.2f} ZION")
    print(f"üî¨ V atomic units: {base_reward_atomic:,}")
    print()
    
    # Ovƒõ≈ô emission schedule
    seconds_per_year = 365 * 24 * 60 * 60
    blocks_per_year = seconds_per_year / 60  # 60 sekund na blok
    annual_base_emission = blocks_per_year * base_reward_zion
    
    print(f"üìä Emission schedule:")
    print(f"   Bloky za rok: {blocks_per_year:,.0f}")
    print(f"   Roƒçn√≠ base emission: {annual_base_emission:,.0f} ZION")
    print(f"   10-let√° base emission: {annual_base_emission * 10:,.0f} ZION")
    print()
    
    # Test consciousness multipliery
    print("üß† Consciousness multipliery s nov√Ωm reward:")
    consciousness_levels = [
        ("PHYSICAL", 1.0),
        ("EMOTIONAL", 1.5),
        ("MENTAL", 2.0), 
        ("SACRED", 3.0),
        ("QUANTUM", 4.0),
        ("COSMIC", 5.0),
        ("ENLIGHTENED", 7.5),
        ("TRANSCENDENT", 10.0),
        ("ON_THE_STAR", 15.0)
    ]
    
    for name, multiplier in consciousness_levels:
        reward = base_reward_zion * multiplier
        annual = reward * blocks_per_year
        print(f"   {name:12}: {multiplier:4.1f}x = {reward:10,.2f} ZION/blok = {annual:15,.0f} ZION/rok")
    
    print()
    
    # Test pre-mine operator balances
    print("‚ö° Mining operator balances:")
    premine_addresses = pool.premine_addresses
    total_operator_balance = 0
    
    for address, info in premine_addresses.items():
        balance = blockchain.get_balance(address)
        balance_zion = balance / 1_000_000
        total_operator_balance += balance_zion
        
        print(f"   {info['type']:12}: {balance_zion:>15,.0f} ZION ({info['multiplier']}x)")
    
    print(f"   {'CELKEM':12}: {total_operator_balance:>15,.0f} ZION")
    print()
    
    # Simulace nalezen√≠ bloku s auto distribuc√≠
    print("üéØ Simulace auto distribuce z oper√°tor≈Ø:")
    print("-" * 40)
    
    # P≈ôidej testovac√≠ tƒõ≈æa≈ôe
    test_miners = [
        ("TestMiner1_SACRED_ADDRESS", "SACRED"),
        ("TestMiner2_QUANTUM_ADDRESS", "QUANTUM"),
        ("TestMiner3_COSMIC_ADDRESS", "COSMIC")
    ]
    
    for address, consciousness in test_miners:
        pool.register_miner(address, consciousness)
        # Simuluj shares
        for i in range(100):
            fake_hash = f"{hash(f'{address}_{i}') & 0xffffffff:08x}"  # Valid hex hash
            pool.submit_share(address, fake_hash, 12345)
    
    # Test auto distribuce pro r≈Øzn√© consciousness levely
    test_scenarios = [
        ("SACRED", "SACRED oper√°tor"),
        ("QUANTUM", "QUANTUM oper√°tor"),
        ("COSMIC", "COSMIC oper√°tor"),
        ("ENLIGHTENED", "ENLIGHTENED oper√°tor"),
        ("TRANSCENDENT", "TRANSCENDENT oper√°tor")
    ]
    
    for consciousness_level, description in test_scenarios:
        print(f"\nüî• Scenario: Blok nalezen s {consciousness_level} consciousness")
        
        try:
            # Z√≠skej oper√°tora pro tento level
            operator_address = None
            for addr, info in premine_addresses.items():
                if info['type'] == consciousness_level:
                    operator_address = addr
                    break
            
            if operator_address:
                operator_balance_before = blockchain.get_balance(operator_address)
                
                # Simuluj auto distribuci
                distribution = pool.auto_distribute_from_operators(base_reward_atomic, consciousness_level)
                
                print(f"   ‚úÖ Distribuce z {distribution['operator_type']} oper√°tora")
                print(f"   üí∞ Total reward: {distribution['total_reward'] / 1_000_000:,.2f} ZION")
                print(f"   üéØ Consciousness bonus: {distribution['consciousness_multiplier']}x")
                print(f"   ‚ù§Ô∏è  Humanit√°rn√≠: {distribution['humanitarian_fee'] / 1_000_000:,.2f} ZION (10%)")
                print(f"   ‚öôÔ∏è  Pool fee: {distribution['pool_operations_fee'] / 1_000_000:,.2f} ZION (2%)")
                print(f"   üë• Tƒõ≈æa≈ô≈Øm: {distribution['miners_share'] / 1_000_000:,.2f} ZION (88%)")
                print(f"   üîÑ Distribuce na {len(distribution['distributions'])} tƒõ≈æa≈ô≈Ø")
                
                # Detail distribuce tƒõ≈æa≈ô≈Øm
                for dist in distribution['distributions'][:3]:  # Zobraz prvn√≠ 3
                    print(f"      ‚Ä¢ {dist['miner_address'][:15]}...: {dist['final_reward'] / 1_000_000:.2f} ZION "
                          f"({dist['share_percentage']:.1f}% shares, {dist['consciousness_bonus']}x bonus)")
            
            else:
                print(f"   ‚ùå Oper√°tor pro {consciousness_level} nenalezen")
                
        except Exception as e:
            print(f"   ‚ùå Chyba: {e}")
    
    print(f"\nüé™ Shrnut√≠ nov√©ho syst√©mu:")
    print("-" * 40)
    print(f"‚úÖ Base reward: {base_reward_zion:,.2f} ZION (27,397x vy≈°≈°√≠ ne≈æ p≈ôedt√≠m)")
    print(f"‚úÖ Emission: 144 miliard ZION za 10 let")
    print(f"‚úÖ Auto distribuce z 5 mining oper√°tor≈Ø (10B ZION celkem)")
    print(f"‚úÖ Consciousness bonusy: 1x a≈æ 15x")
    print(f"‚úÖ Humanit√°rn√≠ fee: 10% automaticky")
    print(f"‚úÖ Pool operations: 2%")
    print(f"‚úÖ Tƒõ≈æa≈ô≈Øm: 88% podle shares a consciousness")
    
    # Spoƒç√≠tej kolik blok≈Ø m≈Ø≈æe oper√°tor financovat
    print(f"\nüìä Udr≈æitelnost oper√°tor≈Ø:")
    for address, info in list(premine_addresses.items())[:3]:  # Prvn√≠ 3
        balance = blockchain.get_balance(address)
        max_reward = base_reward_atomic * info['multiplier'] 
        max_blocks = balance / max_reward if max_reward > 0 else 0
        years_sustainable = (max_blocks * 60) / (365 * 24 * 60 * 60)  # 60 sec per block
        
        print(f"   {info['type']:12}: {max_blocks:8,.0f} blok≈Ø = {years_sustainable:5.1f} let")

if __name__ == "__main__":
    test_new_emission_and_distribution()